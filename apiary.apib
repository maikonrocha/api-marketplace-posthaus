FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# API Marketplace Posthaus

Esta API tem por objetivo Integrar os dados entre a Plataforma Posthaus Marketplace e os Sellers.
Os atributos e parâmetros obrigatórios serão identificados com `*` no início do nome.

#Group Order

## Order [/rest/auth/v1/order]

### Update order status [PUT]

Updates order status by order number.

+ Request (application/json)

        {

        }

+ Response 200 (application/json)

    + Body

        {
            "init": "init"
        }

### Order [GET]

Returns an order by order number.

+ Request (application/json)

        {

        }

+ Response 200 (application/json)

    + Body

        {
            "init": "init"
        }

## Received order [/rest/auth/v1/order/received]

### Received order [PUT]

Confirms the order was received and all its information was validated, specially its order itens stock.

+ Request (application/json)

        {

        }

+ Response 200 (application/json)

    + Body

        {
            "init": "init"
        }

## Orders [/rest/auth/v1/orders]

### Order list [GET]

+ Request (application/json)

        {

        }

+ Response 200 (application/json)

    + Body

        {
            "init": "init"
        }

## Order Item [/rest/auth/v1/order/item]

### Update order item status [PUT]

+ Request (application/json)

        {

        }

+ Response 200 (application/json)

    + Body

        {
            "init": "init"
        }
        
#Group Protocol

## Protocol [/rest/auth/v1/protocol]

### Open new Protocol [POST]

Open new Protocol according the subject.

+ Request (application/json)

        {

        }

+ Response 200 (application/json)

    + Body

        {
            "init": "init"
        }
        
### Get Protocol [GET]

Get a protocol by id.

+ Request (application/json)

        {

        }

+ Response 200 (application/json)

    + Body

        {
            "init": "init"
        }
        
### Answer Protocol [PUT]

Post an answer to a protocol.

+ Request (application/json)

        {

        }

+ Response 200 (application/json)

    + Body

        {
            "init": "init"
        }

## Protocols [/rest/auth/v1/protocols]

### List protocols [GET]

List protocols.

+ Request (application/json)

        {

        }

+ Response 200 (application/json)

    + Body

        {
            "init": "init"
        }

#Group Notifications

## Notification [/rest/auth/v1/notification]

### Get the oldest notification unreaded [GET]

The Marketplace Posthaus add notifications into a queue, the queue order is from the oldest to the newest notification added.
These GET service is going to return the oldest notification, after these notification is going to mark as readed, the next notification is going to be avaliable to GET. 

+ Request (application/json)

        {

        }

+ Response 200 (application/json)

    + Body

        {
            "init": "init"
        }

## Notifications list [/rest/auth/v1/notes{?offset,limit}]

+ Parameters
    + offset (int) Posição de início da paginação
    + limit (int) Número máximo de produtos

### Paginated notifications list [GET]

Get a paginated notifications list

`Saída` 
+ notifications []
  + token (string)
  + type (string)
  + additionalData
    + orderId (number, 10)
  + events []
    + eventType (string)
    + event (string)
    + additionalData
      + orderId (number, 10)
+ page
  + size (int)
  + totalElements (int)
  + totalPages (int)
  + number (int)

+ Request (application/json)
    
    + Headers

            Authorization: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE0Mzg4Mjc0NDN9.POonh-FngFnKeCgDfjjoemmF3Mt8HP2CThHwDLYuYnQ

+ Response 200 (application/json)

    + Body

    {
      "notifications": [
        {
          "token": "45g65d4sdf5465sdf5",
          "type": "NEW_ORDER",
          "additionalData": {
            "orderId": 45687920
          },
          "events": [
            {
              "eventType": "getOrder",
              "event": "https://www.sellercenter.api.ecosweb.com.br/rest/order/45687920",
              "additionalData": {
                "orderId": 45687920
              }
            },
            {
              "eventType": "markAsRead",
              "event": "https://www.sellercenter.api.ecosweb.com.br/rest/note/markAsRead/45g65d4sdf5465sdf5",
              "additionalData": {
                "token": "45g65d4sdf5465sdf5"
              }        
            }
          ]
        },
        {
          "token": "45g65d4sdf5465sdf5",
          "type": "NEW_ORDER",
          "additionalData": {
            "orderId": 45687920
          },
          "events": [
            {
              "eventType": "getOrder",
              "event": "https://www.sellercenter.api.ecosweb.com.br/rest/order/45687920",
              "additionalData": {
                "orderId": 45687920
              }
            },
            {
              "eventType": "markAsRead",
              "event": "https://www.sellercenter.api.ecosweb.com.br/rest/note/markAsRead/45g65d4sdf5465sdf5",
              "additionalData": {
                "token": "45g65d4sdf5465sdf5"
              }        
            }
          ]
        }
      ],
      "page": {
        "size": 2,
        "totalElements": 6,
        "totalPages": 3,
        "number": 1
      }
    }

## Mark as read [/rest/auth/v1/note/markAsRead]

### Mark as read notification [PUT]

Mark as read a notification. If the notification won't be readed during 30 days, the SellerCenter is going to automatically mark as read it.

`Entrada`
+ token (string)

+ Request (application/json)
    
    + Headers

            Authorization: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE0Mzg4Mjc0NDN9.POonh-FngFnKeCgDfjjoemmF3Mt8HP2CThHwDLYuYnQ

            + Body

                    {
                        "token": "45g65d4sdf5465sdf5"
                    }

+ Response 204